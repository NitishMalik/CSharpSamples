The bridge pattern describes how to pull apart two software layers fused together in a single 
class hierarchy and change them into parallel class hierarchies connected by a bridge.

The bridge pattern can be applied to scenarios where the class and what it does changes often. 
Think of it as two layers of abstraction. The class itself becomes one layer and what it does 
i.e. the implementation becomes another layer. 
This setup allows us to extend the two layers independently of each other. In Java, both the 
layers would be represented by two separate class hierarchies. The bridge sits between these two 
class hierarchies, allowing the class abstraction to configure itself with the implementation 
abstraction.

Formally, the bridge pattern lets you vary the abstraction independently of the implementation, 
thus decoupling the two in the process. However, the abstraction and the implementation in the 
definition don't mean Java's abstract class/interface and concrete classes respectively.


Consider the development of a GUI toolkit. The toolkit will likely use system level api calls 
specific to the operating system.If you design a widget menu then you'll need to subclass 
the menu for both Windows and Linux. If you have several dozen widgets then each widget class will end up with subclasses for each operating system you intend to target. The code slowly becomes one giant monolith that is hard to change or debug.

The bridge pattern suggest to create two class hierarchies. One captures the widget operations 
and another which encapsulates the system specific api details. Before the change we could 
have the following classes:

Menu and its derived classes MenuWindows and MenuLinux

After applying the bridge pattern, the resulting classes would be

Menu

AbstractMenuImpl and its derived classes MenuImplWindows and MenuImplLinux

When a Menu object is instantiated we can compose it with either of the implementation classes 
to target different operating systems.


The bridge pattern may be confused with the adapter pattern but one difference between 
the two is that the adapter pattern is usually applied after a system is designed whereas 
the bridge pattern is intentionally applied as part of the design process to decouple the two layers.